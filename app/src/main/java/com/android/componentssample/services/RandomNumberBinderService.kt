package com.android.componentssample.services

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Context
import android.content.Intent
import android.os.*
import androidx.core.app.NotificationCompat
import androidx.lifecycle.MutableLiveData
import com.android.componentssample.Logger
import java.util.*

/**
 * Created by Krishna Upadhya on 19/10/20.
 */

class RandomNumberBinderService : Service() {


    private var timer: CountDownTimer? = null
    private val mBinder: IBinder = RandomBinder()

    // Random number generator
    private val mGenerator: Random = Random()

    // LiveData for capturing random number generated by the service
    val randomNumberLiveData: MutableLiveData<Int> = MutableLiveData()

    // Channel ID for notification
    val CHANNEL_ID = "Random number notification"

    inner class RandomBinder : Binder() {
        val service: RandomNumberBinderService
            get() = this@RandomNumberBinderService
    }

    override fun onBind(intent: Intent?): IBinder? {
        Logger.logMsg("${ServiceConstants.BOUND_SERVICE_TAG} onBind ")
        return mBinder;
    }

    override fun onCreate() {
        super.onCreate()
        Logger.logMsg("${ServiceConstants.BOUND_SERVICE_TAG} oncreate ")
        startNotification()
        startTimer()
    }

    fun getRandomNumber() {
        val randomNum = mGenerator.nextInt(100)
        randomNumberLiveData.value = randomNum
    }

    private fun startTimer() {
        timer = object : CountDownTimer(60000, 2000) {
            override fun onTick(millisUntilFinished: Long) {
                getRandomNumber()
                Logger.logMsg("${ServiceConstants.BOUND_SERVICE_TAG} onTick $millisUntilFinished")
            }

            override fun onFinish() {
                Logger.logMsg("${ServiceConstants.BOUND_SERVICE_TAG} onFinish ")
            }
        }
        timer?.start()
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Logger.logMsg("${ServiceConstants.BOUND_SERVICE_TAG} onStartCommand ")
        return super.onStartCommand(intent, flags, startId)
    }

    override fun onUnbind(intent: Intent?): Boolean {
        Logger.logMsg("${ServiceConstants.BOUND_SERVICE_TAG} onUnbind ")
        return super.onUnbind(intent)
    }

    override fun onDestroy() {
        timer?.cancel()
        Logger.logMsg("${ServiceConstants.BOUND_SERVICE_TAG} onDestroy ")
        super.onDestroy()
    }


    private fun startNotification() {
        val channel = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel(
                CHANNEL_ID,
                "My Channel",
                NotificationManager.IMPORTANCE_DEFAULT
            )
        } else {
            TODO("VERSION.SDK_INT < O")
        }
        (getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager).createNotificationChannel(channel)
        val notification: Notification = NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle("A service is running in the background")
            .setContentText("Generating random number").build()
        startForeground(1, notification)
    }
}